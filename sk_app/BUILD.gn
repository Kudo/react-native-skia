config("sk_app_config") {
  cflags_cc = [ "-std=c++17" ]
  cflags_objcc = [ "-std=c++17" ]
  include_dirs = [ "." ]

  if(is_linux) {
    include_dirs += [
      "unix/",
      "unix/platform/window/"
    ]
  }
}

#X11 Platform sources and dependenices
if(is_linux) {

  x11_platform_source = [
    "unix/platform/window/x11/keysym2ucs.c",
    "unix/platform/window/x11/keysym2ucs.h",
  ]
}

source_set("sk_app") {
  sources = [
    "Application.h",
    "Window.h",
    "Window.cpp",
    "WindowContext.h",
    "WindowContext.cpp",
    "GLWindowContext.h",
    "GLWindowContext.cpp",
    "GrGLUtil.h",
    "GrGLUtil.cpp",
  ]

  public_deps = [
    "//skia",
  ]

  frameworks = []

  if (is_mac) {
    sources += [
      "mac/RasterWindowContext_mac.mm",
      "mac/WindowContextFactory_mac.h",
      "mac/Window_mac.h",
      "mac/Window_mac.mm",
      "mac/main_mac.mm",
      "mac/GLWindowContext_mac.mm",
      "mac/GrGLMakeNativeInterface_mac.cpp",
    ]
    frameworks += [
      "QuartzCore.framework",
      "Cocoa.framework",
      "Foundation.framework",
      "OpenGL.framework",
    ]
  }

  if (is_linux) {
     sources += [
        "unix/raster/RasterWindowContext_unix.cpp",
        "unix/WindowContextFactory_unix.h",
        "unix/Window_unix.cpp",
        "unix/Window_unix.h",
        "unix/main_unix.cpp",
        "unix/glx/GLWindowContextGLX.cpp",
        "unix/glx/GrGLMakeNativeInterfaceGLX.cpp",
      ]
      sources += x11_platform_source

      libs = [
        "GL",  # Used by raster window context, so cannot be behind skia_use_gl.
        "X11",
      ]
   }

   configs += [
    ":sk_app_config",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]

  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
}
